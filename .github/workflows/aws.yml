name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION:         us-east-1 
  ECR_REPOSITORY:     ai-adventure-spacy
  ECR_CACHE_TAG:      ai-adventure-spacy-cache
  FUNCTION_NAME:      ai-adventure-spacy
  FUNCTION_MEMORY:    10240
  FUNCTION_STORAGE:   512
  FUNCTION_TIMEOUT:   900
  VPC_ID:             vpc-0203ecdde352e0bbc
  EFS_ACCESS_POINT:   transformers-cache
  TRANSFORMERS_CACHE: /mnt/efs0/transformers-cache
  AMR_ROOT_DIR:       /mnt/efs0/amr
  MOUNT_POINT:        /mnt/efs0
  REMOTE_FOLDER:      /efs0

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        buildkitd-flags: --allow-insecure-entitlement security.insecure

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Expose GitHub Runtime
      uses: crazy-max/ghaction-github-runtime@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG:    ${{ github.sha }}
        SSH_HOST:     ${{ secrets.SSH_HOST }}
        SSH_USER:     ${{ secrets.SSH_USER }}
        SSH_KEY:      ${{ secrets.SSH_KEY }}
        EFS_HOST:     ${{ secrets.EFS_HOST }}
      run: |
        docker buildx build \
          --allow security.insecure \
          --build-arg AMR_ROOT_DIR="${{ env.AMR_ROOT_DIR }}" \
          --build-arg TRANSFORMERS_CACHE="${{ env.TRANSFORMERS_CACHE }}" \
          --build-arg MOUNT_POINT="${{ env.MOUNT_POINT }}" \
          --build-arg REMOTE_FOLDER="${{ env.REMOTE_FOLDER }}" \
          --secret id=SSH_KEY \
          --secret id=SSH_HOST \
          --secret id=SSH_USER \
          --secret id=EFS_HOST \
          --push \
          --progress=plain \
          --provenance=false \
          --platform linux/amd64 \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --target main \
          -f docker/Dockerfile .

        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update Lambda image
      id: lambda-deploy
      run: |
        aws lambda update-function-code \
            --function-name ${{ env.FUNCTION_NAME }} \
            --image-uri ${{ steps.build-image.outputs.image }} \
            --no-cli-pager \
            --no-paginate
      
    - name: Wait for code update
      uses: ./.github/actions/lambda-wait
      with:
        lambda-status: function-updated

    - name: Update Lambda configuration
      run: |
        SUBNETS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=${{ env.VPC_ID }} --no-cli-pager --no-paginate | jq -r '.Subnets[].SubnetId' | paste -sd ',' -)
        SECURITY_GROUP=$(aws ec2 describe-security-groups --filters Name=vpc-id,Values=${{ env.VPC_ID }} Name=group-name,Values=default --no-cli-pager --no-paginate | jq -r '.SecurityGroups[0].GroupId')
        EFS_ACCESS_POINT=$(aws efs describe-access-points --no-paginate --no-cli-pager --query "AccessPoints[?Name=='${{ env.EFS_ACCESS_POINT }}']" | jq -r '.[0].AccessPointArn')

        aws lambda update-function-configuration \
            --function-name ${{ env.FUNCTION_NAME }} \
            --memory-size ${{ env.FUNCTION_MEMORY }} \
            --ephemeral-storage Size=${{ env.FUNCTION_STORAGE }} \
            --environment Variables=\{SPACY_SERVER_ENV=prod,SPACY_LATEST_VERSION_FILE=${{ env.MOUNT_POINT }}/latest-version\} \
            --timeout ${{ env.FUNCTION_TIMEOUT }} \
            --vpc SubnetIds=$SUBNETS,SecurityGroupIds=$SECURITY_GROUP \
            --file-system-configs Arn=$EFS_ACCESS_POINT,LocalMountPath=${{ env.MOUNT_POINT }} \
            --no-cli-pager

    - name: Wait for config update
      uses: ./.github/actions/lambda-wait
      with:
        lambda-status: function-updated

    - name: Publish Function
      id: publish-function
      run: |
        LAMBDA_FUNCTION_VERSION="$(aws lambda publish-version --function-name ${{ env.FUNCTION_NAME }} --no-cli-pager | jq -r '.Version')"
        echo "function-version=$LAMBDA_FUNCTION_VERSION" >> $GITHUB_OUTPUT

    - name: Wait for published
      uses: ./.github/actions/lambda-wait
      with:
        lambda-status: published-version-active
    
    - name: Update latest alias
      run: |
        aws lambda update-alias \
          --function-name ${{ env.FUNCTION_NAME }} \
          --function-version ${{ steps.publish-function.outputs.function-version }} \
          --name latest
        
    - name: Wait for alias update
      uses: ./.github/actions/lambda-wait
      with:
        lambda-status: function-updated

    - name: Invoke Lambda
      run: |
        aws lambda invoke \
          --cli-binary-format raw-in-base64-out \
          --function-name ${{ env.FUNCTION_NAME }} \
          --qualifier latest \
          --invocation-type Event \
          --cli-binary-format raw-in-base64-out \
          --payload '{"warmup":true,"new_version":${{ steps.publish-function.outputs.function-version }}}' \
          response.json